import { Target } from './target';
import type { OperationOptions } from './target';

// Helper function to convert camelCase to snake_case
function camelToSnakeCase(str: string): string {
	return str.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`);
}

// Helper function to capitalise first letter
function capitalise(str: string): string {
	return str.charAt(0).toUpperCase() + str.slice(1);
}

export class LuaTarget extends Target {
	override getOutputPathParts(): string[] {
		return ['..', 'lua', 'operations.lua'];
	}

	override renderHeader(): string[] {
		return [
			`-- Generated by ts-morph script. Do not edit manually!`,
			``,
			`---@param func function`,
			`---@return function`,
			`local function safe_operation(func)`,
			`    return function()`,
			`        local success, err = pcall(func)`,
			`        if not success then`,
			`            reaper.ShowConsoleMsg("Error: " .. tostring(err) .. "\\n")`,
			`        end`,
			`    end`,
			`end`
		];
	}

	override renderImports(): string[] {
		const lines: string[] = [];
		lines.push(`local globals = require "globals"`);
		for (const imp of this.imports) {
			lines.push(imp);
		}
		return lines;
	}

	override addOperation(options: OperationOptions): void {
		super.addOperation(options);
		this.imports.push(
			`local ${capitalise(options.name)} = require "operations/${camelToSnakeCase(options.name)}"`
		);
	}

	override renderOperations(): string[] {
		let lines: string[] = [];
		lines.push(`local Operations = {`);

		const allOperations: string[][] = [];
		for (const { name, inputs, outputs } of this.operations) {
			const operationLines = this.renderOperation(name, inputs, outputs);
			allOperations.push(operationLines);
		}
		lines.push(allOperations.map((operationLines) => operationLines.join('\n')).join('\n\n'));

		lines.push(`}`);
		lines.push(``);
		lines.push(`return Operations`);

		return lines;
	}

	private renderOperation(name: string, inputs: string[], outputs: string[]): string[] {
		const operationLines: string[] = [];
		const functionName = name.charAt(0).toUpperCase() + name.slice(1);
		operationLines.push(`\t["${name}"] = safe_operation(function()`);
		if (inputs.length > 0) {
			for (const param of inputs) {
				operationLines.push(`\t\tlocal ${param} = reaper.GetExtState(globals.SECTION, "${param}")`);
				operationLines.push(`\t\tif not ${param} or ${param} == "" then`);
				operationLines.push(`\t\t\terror("Missing required parameter: ${param}")`);
				operationLines.push(`\t\tend`);
				operationLines.push('');
			}
		}
		const argsList = inputs.join(', ');
		if (outputs.length === 0) {
			operationLines.push(`\t\t${functionName}(${argsList})`);
		} else {
			operationLines.push(`\t\tlocal result = ${functionName}(${argsList})`);
			operationLines.push(
				`\t\tif result then reaper.SetExtState(globals.SECTION, globals.KEYS.script_output, result, false) end`
			);
		}
		if (inputs.length > 0) {
			for (const param of inputs) {
				operationLines.push(`\t\treaper.DeleteExtState(globals.SECTION, "${param}", true)`);
			}
		}
		operationLines.push(`\tend),`);
		return operationLines;
	}
}
