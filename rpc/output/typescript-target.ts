import { Target, type OperationOptions } from './target';

export class TypeScriptTarget extends Target {
	override getOutputPathParts(): string[] {
		return ['..', 'frontend', 'src', 'lib', 'api', 'reaper-backend', 'rpc_definitions.ts'];
	}

	override renderHeader(): string[] {
		return [`// Generated by ts-morph script. Do not edit manually!\n`];
	}

	override renderImports(): string[] {
		return [];
	}

	override renderOperations(): string[] {
		let code: string[] = [];
		for (const { name, inputs, outputs } of this.operations) {
			const fnName = name;
			const inputParams = inputs.join(', ');
			code.push(
				`export async function ${fnName}(${inputParams ? inputParams + ': string' : ''}) {\n`
			);
			if (outputs.length === 0) {
				code.push(`\tawait ${fnName}(${inputParams});\n`);
				code.push(`}\n`);
			} else {
				code.push(`\tconst result = await ${fnName}(${inputParams});\n`);
				code.push(`\treturn { ${outputs.map((o) => o + ': result').join(', ')} };\n`);
				code.push(`}\n`);
			}
		}
		return code;
	}
}
