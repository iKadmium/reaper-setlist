// Generated by ts-morph script. Do not edit manually!

import { configuration } from "$lib/stores/configuration.svelte";
import type { ReaperCommand, ReaperApiClient } from "../api";
import { ReaperScriptCommandBuilder } from './reaper-script-command-builder';

export class ReaperRpcClient {
	constructor(
		private readonly commandBuilder: ReaperScriptCommandBuilder, 
		private readonly apiClient: ReaperApiClient
	) { }

	private async getScriptActionId(): Promise<ReaperCommand> {
		await configuration.ensureInitialized();
		const actionId = $derived(configuration.scriptActionId);
		if (!actionId) {
			throw new Error("Script action ID is not set. Please configure it in the settings.");
		}
	return actionId as ReaperCommand;
	}

	public async listProjects(): Promise<{ projects: string[] }> {
		const actionId = await this.getScriptActionId();
		const commands: ReaperCommand[] = []; 
		commands.push(this.commandBuilder.setOperation("listProjects")); 
		commands.push(actionId); 
		commands.push(this.commandBuilder.getExtState("projects")); 
		const result = await this.apiClient.sendCommands(commands); 
		const projectsRaw = result[2];
		const projects = projectsRaw.split(',');
		return { projects }; 
	}

	public async openProject(projectPath: string): Promise<void> {
		const actionId = await this.getScriptActionId();
		const commands: ReaperCommand[] = []; 
		commands.push(this.commandBuilder.setExtState("projectPath", projectPath, true)); 
		commands.push(this.commandBuilder.setOperation("openProject")); 
		commands.push(actionId); 
		await this.apiClient.sendCommands(commands);
	}

	public async testActionId(testNonce: string): Promise<{ testOutput: string }> {
		const actionId = await this.getScriptActionId();
		const commands: ReaperCommand[] = []; 
		commands.push(this.commandBuilder.setExtState("testNonce", testNonce, true)); 
		commands.push(this.commandBuilder.setOperation("testActionId")); 
		commands.push(actionId); 
		commands.push(this.commandBuilder.getExtState("testOutput")); 
		const result = await this.apiClient.sendCommands(commands); 
		const testOutput = result[3];
		return { testOutput }; 
	}
}