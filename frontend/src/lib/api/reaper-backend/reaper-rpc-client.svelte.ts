// Generated by ts-morph script. Do not edit manually!

import type { ReaperApiClient } from "../api";
import { GetStateCommand, RunScriptCommand, SetOperationCommand, SetStateCommand } from "./commands";
import { SectionKeys } from "./reaper-state";




export interface ReaperTab {
	index: number;
	name: string;
	length: number;
}

export class ReaperRpcClient {
	constructor(private readonly apiClient: ReaperApiClient) { }

	public async listProjects(): Promise<string[]> { 
		const commands = [ 
			new SetOperationCommand("listProjects"), 
			new RunScriptCommand(), 
			new GetStateCommand(SectionKeys.ReaperSetlist, "projects"), 
		] as const; 
		const [_setOperation, _runScript, projectsRaw] = await this.apiClient.executeCommands(commands);  
		if (projectsRaw === undefined) { 
			throw new Error("Failed to retrieve projects. Please check the script configuration."); 
		} 
		const projects = JSON.parse(projectsRaw) as string[];  
		return projects;  
	}  

	public async openProject(projectPath: string): Promise<void> { 
		const commands = [ 
			new SetStateCommand(SectionKeys.ReaperSetlist, "projectPath", projectPath), 
			new SetOperationCommand("openProject"), 
			new RunScriptCommand(), 
		] as const; 
		await this.apiClient.executeCommands(commands);  
	}  

	public async testActionId(testNonce: string): Promise<string> { 
		const commands = [ 
			new SetStateCommand(SectionKeys.ReaperSetlist, "testNonce", testNonce), 
			new SetOperationCommand("testActionId"), 
			new RunScriptCommand(), 
			new GetStateCommand(SectionKeys.ReaperSetlist, "testOutput"), 
		] as const; 
		const [_setTestNonce, _setOperation, _runScript, testOutputRaw] = await this.apiClient.executeCommands(commands);  
		if (testOutputRaw === undefined) { 
			throw new Error("Failed to retrieve testOutput. Please check the script configuration."); 
		} 
		const testOutput = testOutputRaw;  
		return testOutput;  
	}  

	public async getProjectLength(): Promise<number> { 
		const commands = [ 
			new SetOperationCommand("getProjectLength"), 
			new RunScriptCommand(), 
			new GetStateCommand(SectionKeys.ReaperSetlist, "projectLength"), 
		] as const; 
		const [_setOperation, _runScript, projectLengthRaw] = await this.apiClient.executeCommands(commands);  
		if (projectLengthRaw === undefined) { 
			throw new Error("Failed to retrieve projectLength. Please check the script configuration."); 
		} 
		const projectLength = parseFloat(projectLengthRaw);  
		return projectLength;  
	}  

	public async getOpenTabs(): Promise<ReaperTab[]> { 
		const commands = [ 
			new SetOperationCommand("getOpenTabs"), 
			new RunScriptCommand(), 
			new GetStateCommand(SectionKeys.ReaperSetlist, "tabs"), 
		] as const; 
		const [_setOperation, _runScript, tabsRaw] = await this.apiClient.executeCommands(commands);  
		if (tabsRaw === undefined) { 
			throw new Error("Failed to retrieve tabs. Please check the script configuration."); 
		} 
		const tabs = JSON.parse(tabsRaw) as ReaperTab[];  
		return tabs;  
	}  
}