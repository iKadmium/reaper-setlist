name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  # Detect changes to determine which jobs to run
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      lua: ${{ steps.filter.outputs.lua }}
      reapack: ${{ steps.filter.outputs.reapack }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
            lua:
              - 'lua/**'
            reapack:
              - 'reapack/**'

  # Job to build and test the SvelteKit Frontend
  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest # Or a specific version like '1.1.17'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: bun install --frozen-lockfile

      - name: Run frontend lint
        working-directory: ./frontend
        run: bun lint

      - name: Run frontend type check
        working-directory: ./frontend
        run: bun check

      - name: Run frontend tests
        working-directory: ./frontend
        run: bun test

      - name: Build frontend
        working-directory: ./frontend
        run: bun run build

      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

  # Job to build and test the Lua Scripts
  lua:
    name: Lua
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.lua == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install Lua and luacheck
        run: |
          sudo apt-get update
          sudo apt-get install -y lua5.4 luarocks
          sudo luarocks install luacheck

      - name: Run luacheck
        working-directory: ./lua
        run: luacheck .

      - name: Run Lua bundle
        working-directory: ./lua
        run: |
          ./bundle.sh

      - name: Upload Lua build artifact
        uses: actions/upload-artifact@v4
        with:
          name: lua-build
          path: lua/build/

  # Job to update ReaPack repository
  reapack:
    name: Update ReaPack Repository
    runs-on: ubuntu-latest
    needs: [changes, frontend, lua]
    if: |
      always() &&
      (needs.changes.outputs.reapack == 'true' ||
       (needs.frontend.result == 'success' || needs.frontend.result == 'skipped') ||
       (needs.lua.result == 'success' || needs.lua.result == 'skipped'))

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Download frontend build (if available)
        if: needs.frontend.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-build/
        continue-on-error: true

      - name: Download Lua build (if available)  
        if: needs.lua.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: lua-build
          path: lua-build/
        continue-on-error: true

      - name: Build and package components
        run: |
          # Ensure we have the latest builds
          if [ ! -d "frontend-build" ] && [ -d "frontend" ]; then
            echo "Building frontend..."
            cd frontend
            bun install --frozen-lockfile
            bun run build
            cd ..
            cp -r frontend/build frontend-build
          fi

          if [ ! -d "lua-build" ] && [ -d "lua" ]; then
            echo "Building Lua bundle..."
            cd lua
            ./bundle.sh
            cd ..
            cp -r lua/build lua-build
          fi

          # Create package structure
          mkdir -p package/reaper-setlist
          mkdir -p package/files

          # Copy frontend build output if available
          if [ -d "frontend-build" ]; then
            cp -r frontend-build/* package/files/reaper-setlist/
          elif [ -d "frontend/build" ]; then
            cp -r frontend/build/* package/files/reaper-setlist/
          fi

          # Copy setlist.html if it exists
          if [ -f "html/setlist.html" ]; then
            cp html/setlist.html package/files/
          fi

          # Copy Lua bundle if available
          if [ -f "lua-build/reaper-setlist.lua" ]; then
            cp lua-build/reaper-setlist.lua package/files/
          elif [ -f "lua/build/reaper-setlist.lua" ]; then
            cp lua/build/reaper-setlist.lua package/files/
          fi

      - name: Update ReaPack repository structure
        run: |
          # Clear existing files in ReaPack repo
          rm -rf reapack/repo/reaper-setlist/files/*

          # Copy new files to ReaPack structure
          if [ -d "package/files" ]; then
            cp -r package/files/* reapack/repo/reaper-setlist/files/
          fi

          echo "Updated ReaPack repository with new files:"
          find reapack/repo/reaper-setlist/files -type f | head -20

      - name: Install ReaPack generator dependencies
        working-directory: ./reapack/generator
        run: bun install --frozen-lockfile

      - name: Update ReaPack index
        working-directory: ./reapack/generator
        run: |
          # Get version from git or use a default
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev-$(date +%Y%m%d-%H%M%S)")
          
          # Run the CI release script
          bun ci-release.ts release \
            --release-version "$VERSION" \
            --changelog "Automated build from CI" \
            --author "GitHub Actions" \
            --time "$(date -u +%Y-%m-%dT%H:%M:%SZ)"

      - name: Commit and push ReaPack changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet reapack/repo/index.xml; then
            echo "No changes to ReaPack index"
          else
            git add reapack/repo/
            git commit -m "Update ReaPack repository [skip ci]"
            git push
          fi
