name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  # Job to build and test the SvelteKit Frontend
  frontend_build_test:
    name: Frontend Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest # Or a specific version like '1.1.17'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: bun install --frozen-lockfile

      - name: Run frontend tests
        working-directory: ./frontend
        run: bun test

      - name: Build frontend
        working-directory: ./frontend
        run: bun run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-output
          path: ./frontend/build
          # Retain the artifact for 5 days
          retention-days: 5

  # Job to build and test the Rust Backend
  backend_build_test:
    name: Backend Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable # Recommended replacement
        with:
          components: clippy

      - name: Run cargo clippy
        working-directory: ./backend
        run: cargo clippy -- -D warnings

      - name: Run cargo tests
        working-directory: ./backend
        run: cargo test

      - name: Run cargo build (test build)
        working-directory: ./backend
        run: cargo build --release

  # Job to build and push multi-platform Docker image
  docker_build_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [frontend_build_test, backend_build_test] # This job runs only after frontend and backend tests pass
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            rustarch: x86_64
            tagarch: amd64
          - platform: linux/arm64
            rustarch: aarch64
            tagarch: arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set repo name (lowercase)
        id: repo
        run: echo "REPO=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Download frontend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-output
          path: ./frontend/build # This will download the 'build' folder into ./frontend/build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        # Only attempt login if it's a push to main
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Uses the GitHub user triggering the workflow
          password: ${{ secrets.GITHUB_TOKEN }} # Built-in token with permissions

      - name: Build and push Docker image for ${{ matrix.platform }}
        run: |
          docker buildx build \
            --build-arg RUSTARCH=${{ matrix.rustarch }} \
            --build-arg TARGETARCH=${{ matrix.tagarch }} \
            -t ghcr.io/$REPO:${{ matrix.tagarch }} . \
            --push

  # Manifest job to combine images
  docker_manifest:
    name: Create and Push Multi-Arch Manifest
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [docker_build_push]
    steps:
      - name: Set repo name (lowercase)
        id: repo
        run: echo "REPO=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create multi-arch manifest
        run: |
          docker manifest create ghcr.io/$REPO:latest \
            ghcr.io/$REPO:amd64 \
            ghcr.io/$REPO:arm64

      - name: Annotate amd64 image
        run: |
          docker manifest annotate ghcr.io/$REPO:latest ghcr.io/$REPO:amd64 --arch amd64 --os linux

      - name: Annotate arm64 image
        run: |
          docker manifest annotate ghcr.io/$REPO:latest ghcr.io/$REPO:arm64 --arch arm64 --os linux

      - name: Push multi-arch manifest
        run: |
          docker manifest push ghcr.io/$REPO:latest

      - name: Delete arch-specific images from GitHub Container Registry
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          for tag in amd64 arm64; do
            echo "Deleting tag: $tag"
            version_id=$(gh api /orgs/${REPO%%/*}/packages/container/${REPO##*/}/versions --jq ".[] | select(.metadata.container.tags[] == \"$tag\") | .id" | head -n1)
            if [ -n "$version_id" ]; then
              gh api -X DELETE /orgs/${REPO%%/*}/packages/container/${REPO##*/}/versions/$version_id
              echo "Deleted version $version_id for tag $tag"
            else
              echo "No version found for tag $tag"
            fi
          done
