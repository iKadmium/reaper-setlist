name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job to build and test the SvelteKit Frontend
  frontend_build_test:
    name: Frontend Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest # Or a specific version like '1.1.17'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: bun install --frozen-lockfile

      - name: Run frontend tests
        working-directory: ./frontend
        run: bun test

      - name: Build frontend
        working-directory: ./frontend
        run: bun run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-output
          path: ./frontend/build
          # Retain the artifact for 5 days
          retention-days: 5

  # Job to build and test the Rust Backend
  backend_build_test:
    name: Backend Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable # Recommended replacement
        with:
          components: clippy

      - name: Run cargo clippy
        working-directory: ./backend
        run: cargo clippy -- -D warnings

      - name: Run cargo tests
        working-directory: ./backend
        run: cargo test

      - name: Run cargo build (test build)
        working-directory: ./backend
        run: cargo build --release

  # Job to build and push multi-platform Docker image
  docker_build_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [frontend_build_test, backend_build_test] # This job runs only after frontend and backend tests pass

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set repo name (lowercase)
        id: repo
        run: echo "REPO=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Download frontend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-output
          path: ./frontend/build # This will download the 'build' folder into ./frontend/build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        # Only attempt login if it's a push to main
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Uses the GitHub user triggering the workflow
          password: ${{ secrets.GITHUB_TOKEN }} # Built-in token with permissions

      - name: Build Docker image for amd64
        run: |
          docker build --build-arg BIN_ARCH=x86_64 -t ghcr.io/$REPO:amd64 .
          docker push ghcr.io/$REPO:amd64

      - name: Build Docker image for arm64
        run: |
          docker build --build-arg BIN_ARCH=aarch64 -t ghcr.io/$REPO:arm64 .
          docker push ghcr.io/$REPO:arm64

      - name: Create and push multi-arch manifest
        run: |
          docker manifest create ghcr.io/$REPO:latest \
            --amend ghcr.io/$REPO:amd64 \
            --amend ghcr.io/$REPO:arm64
          docker manifest push ghcr.io/$REPO:latest
