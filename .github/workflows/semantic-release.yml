name: Semantic Release with PR Tags

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write
  packages: write

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.repository_owner == github.actor || github.event_name == 'workflow_dispatch')) ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/'))
    outputs:
      new-release: ${{ steps.semantic.outputs.new-release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine mode
        id: mode
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" && "${{ github.event.pull_request.head.ref }}" == release/* ]]; then
            echo "mode=release" >> $GITHUB_OUTPUT
            echo "🚀 Release mode: Tag and release already created in PR"
          else
            echo "mode=pr" >> $GITHUB_OUTPUT
            echo "📝 PR mode: Creating release PR with tags"
          fi

      - name: Wait for Frontend CI
        if: github.event_name == 'push'
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-frontend
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Frontend"
          ref: ${{ github.event.after || github.sha }}
          timeoutSeconds: 1800

      - name: Wait for Backend CI
        if: github.event_name == 'push'
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-backend
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Backend"
          ref: ${{ github.event.after || github.sha }}
          timeoutSeconds: 1800

      - name: Check CI Results
        if: github.event_name == 'push'
        run: |
          echo "Frontend check result: ${{ steps.wait-for-frontend.outputs.conclusion || 'skipped' }}"
          echo "Backend check result: ${{ steps.wait-for-backend.outputs.conclusion || 'skipped' }}"

          if [[ "${{ steps.wait-for-frontend.outputs.conclusion }}" == "failure" ]] || [[ "${{ steps.wait-for-backend.outputs.conclusion }}" == "failure" ]]; then
            echo "CI checks failed!"
            exit 1
          fi

          echo "CI checks passed or were skipped (no changes)"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Configure Git
        run: |
          git config --global user.name 'semantic-release-bot'
          git config --global user.email 'semantic-release-bot@users.noreply.github.com'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/github

      - name: Prepare Release with Tags
        if: steps.mode.outputs.mode == 'pr'
        id: prepare-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📝 Checking if a release is needed..."
          OUTPUT=$(semantic-release --dry-run 2>&1)
          echo "$OUTPUT" | tee semantic-release.log
          
          if echo "$OUTPUT" | grep -q "The next release version is"; then
            VERSION=$(echo "$OUTPUT" | grep -oE "The next release version is [0-9]+\.[0-9]+\.[0-9]+" | head -1 | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")
            
            if [[ -n "$VERSION" ]]; then
              echo "next-version=$VERSION" >> $GITHUB_OUTPUT
              echo "📋 Next release will be: $VERSION"
              
              # Create release branch
              git checkout -b "release/$VERSION"
              
              # Prepare release files using semantic-release plugins but don't publish
              cat > .releaserc.prepare.json << 'PREP_EOF'
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ]
            ]
          }
          PREP_EOF
              
              # Generate changelog and prepare files
              semantic-release --config .releaserc.prepare.json --no-ci --dry-run
              
              # Update package.json files with new version
              if [ -f "package.json" ]; then
                echo "📦 Updating root package.json version to $VERSION"
                sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" package.json
                git add package.json
              fi
              
              if [ -f "frontend/package.json" ]; then
                echo "�� Updating frontend package.json version to $VERSION"
                sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" frontend/package.json
                git add frontend/package.json
              fi
              
              # Update Cargo.toml if it exists
              if [ -f "backend/Cargo.toml" ]; then
                echo "📦 Updating backend Cargo.toml version to $VERSION"
                sed -i "s/^version = \".*\"/version = \"$VERSION\"/" backend/Cargo.toml
                git add backend/Cargo.toml
              fi
              
              # Add changelog if it was generated
              if [ -f "CHANGELOG.md" ]; then
                git add CHANGELOG.md
              fi
              
              # Commit the changes
              git commit -m "chore(release): prepare $VERSION" || echo "No changes to commit"
              
              # Create the tag on this branch
              echo "🏷️ Creating tag v$VERSION"
              git tag -a "v$VERSION" -m "Release v$VERSION"
              
              # Push branch and tag
              git push origin "release/$VERSION"
              git push origin "v$VERSION"
              
              echo "has-release=true" >> $GITHUB_OUTPUT
              
              # Clean up temp file
              rm -f .releaserc.prepare.json
            else
              echo "has-release=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has-release=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No release needed"
          fi

      - name: Create Release PR
        if: steps.mode.outputs.mode == 'pr' && steps.prepare-release.outputs.has-release == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: release/${{ steps.prepare-release.outputs.next-version }}
          title: "🚀 Release ${{ steps.prepare-release.outputs.next-version }}"
          body: |
            ## Release ${{ steps.prepare-release.outputs.next-version }}

            This release PR includes:
            - 📦 Version bumps in package.json/Cargo.toml
            - 📝 Updated CHANGELOG.md
            - 🏷️ Git tag v${{ steps.prepare-release.outputs.next-version }}

            **The tag has already been created and will be merged with this PR.**
            **Merging this PR will complete the release process.**
          labels: |
            release
            automated
          reviewers: ${{ github.actor }}
          draft: false

      - name: Complete Release
        if: steps.mode.outputs.mode == 'release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Release PR was merged, completing release process..."
          
          # The tag should already exist from the PR, just create GitHub release
          TAG_NAME=$(git describe --tags --exact-match HEAD 2>/dev/null || git describe --tags --abbrev=0 HEAD 2>/dev/null)
          
          if [[ -n "$TAG_NAME" ]]; then
            echo "✅ Found tag: $TAG_NAME"
            
            # Create GitHub release using the existing tag
            gh release create "$TAG_NAME" \
              --title "Release $TAG_NAME" \
              --notes "Automated release based on conventional commits." \
              --verify-tag
              
            echo "new-release=true" >> $GITHUB_OUTPUT
          else
            echo "❌ No tag found for this commit"
            echo "new-release=false" >> $GITHUB_OUTPUT
          fi

  trigger-release:
    name: Trigger Release Build
    needs: semantic-release
    if: needs.semantic-release.outputs.new-release == 'true'
    uses: ./.github/workflows/release.yml
