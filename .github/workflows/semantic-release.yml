name: Semantic Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write
  packages: write

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: github.repository_owner == github.actor || github.event_name == 'workflow_dispatch'
    outputs:
      new-release: ${{ steps.semantic.outputs.new-release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for Frontend CI
        if: github.event_name == 'push'
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-frontend
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Frontend"
          ref: ${{ github.event.after || github.sha }}
          timeoutSeconds: 1800

      - name: Wait for Backend CI
        if: github.event_name == 'push'
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-backend
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Backend"
          ref: ${{ github.event.after || github.sha }}
          timeoutSeconds: 1800

      - name: Check CI Results
        if: github.event_name == 'push'
        run: |
          echo "Frontend check result: ${{ steps.wait-for-frontend.outputs.conclusion || 'skipped' }}"
          echo "Backend check result: ${{ steps.wait-for-backend.outputs.conclusion || 'skipped' }}"

          # Only fail if a check explicitly failed (not if it was skipped/didn't exist)
          if [[ "${{ steps.wait-for-frontend.outputs.conclusion }}" == "failure" ]] || [[ "${{ steps.wait-for-backend.outputs.conclusion }}" == "failure" ]]; then
            echo "CI checks failed!"
            exit 1
          fi

          echo "CI checks passed or were skipped (no changes)"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Configure Git
        run: |
          git config --global user.name 'semantic-release-bot'
          git config --global user.email 'semantic-release-bot@users.noreply.github.com'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/release-notes-generator

      - name: Run semantic-release (dry-run) to check for new release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run semantic-release in dry-run mode to get release info
          OUTPUT=$(semantic-release --dry-run 2>&1)
          echo "$OUTPUT" | tee semantic-release.log

          # Check if a new release would be published
          if echo "$OUTPUT" | grep -q "The next release version is"; then
            echo "new-release=true" >> $GITHUB_OUTPUT
            # Extract version from log (improved regex)
            VERSION=$(echo "$OUTPUT" | grep -o "The next release version is [0-9.]*" | sed 's/The next release version is //' | head -n1)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Found new version: $VERSION"
          else
            echo "new-release=false" >> $GITHUB_OUTPUT
            echo "No new release needed"
          fi

      - name: Generate changelog for PR
        if: steps.semantic.outputs.new-release == 'true'
        id: changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a temporary config that only generates changelog without publishing
          cat > .releaserc.temp.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ]
            ]
          }
          EOF
          
          # Run semantic-release with the temp config to generate changelog
          semantic-release --dry-run --extends .releaserc.temp.json 2>&1 | tee changelog-gen.log
          
          # Extract release notes for PR body
          if [ -f "CHANGELOG.md" ]; then
            # Get the latest entry from changelog
            RELEASE_NOTES=$(awk '/^## / { if (found) exit; found=1; next } found' CHANGELOG.md | head -20)
            echo "release_notes<<EOF" >> $GITHUB_OUTPUT
            echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Release PR
        if: steps.semantic.outputs.new-release == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(release): prepare v${{ steps.semantic.outputs.version }} [skip ci]"
          title: "🚀 Release v${{ steps.semantic.outputs.version }}"
          body: |
            ## 🚀 Release v${{ steps.semantic.outputs.version }}

            This is an automated release PR created by semantic-release.

            ### 📋 What's included
            - ✅ Updated CHANGELOG.md with release notes
            - ✅ Version bumped to ${{ steps.semantic.outputs.version }}
            - ✅ All CI checks have passed

            ### 📝 Release Notes
            ${{ steps.changelog.outputs.release_notes }}

            ---
            **⚠️ Important:** Merging this PR will trigger the actual release process and publish the new version.

            Auto-generated by [semantic-release](https://github.com/semantic-release/semantic-release) 🤖
          branch: release/v${{ steps.semantic.outputs.version }}
          delete-branch: true
          labels: |
            🚀 release
            🤖 automated
          assignees: ${{ github.actor }}
