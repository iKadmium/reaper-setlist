name: Semantic Release

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write
  packages: write

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.repository_owner == github.actor || github.event_name == 'workflow_dispatch')) ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/'))
    outputs:
      new-release: ${{ steps.semantic.outputs.new-release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine mode
        id: mode
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" && "${{ github.event.pull_request.head.ref }}" == release/* ]]; then
            echo "mode=release" >> $GITHUB_OUTPUT
            echo "üöÄ Release mode: Publishing actual release"
          else
            echo "mode=pr" >> $GITHUB_OUTPUT
            echo "üìù PR mode: Creating release PR"
          fi

      - name: Wait for Frontend CI
        if: github.event_name == 'push'
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-frontend
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Frontend"
          ref: ${{ github.event.after || github.sha }}
          timeoutSeconds: 1800

      - name: Wait for Backend CI
        if: github.event_name == 'push'
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-backend
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Backend"
          ref: ${{ github.event.after || github.sha }}
          timeoutSeconds: 1800

      - name: Check CI Results
        if: github.event_name == 'push'
        run: |
          echo "Frontend check result: ${{ steps.wait-for-frontend.outputs.conclusion || 'skipped' }}"
          echo "Backend check result: ${{ steps.wait-for-backend.outputs.conclusion || 'skipped' }}"

          # Only fail if a check explicitly failed (not if it was skipped/didn't exist)
          if [[ "${{ steps.wait-for-frontend.outputs.conclusion }}" == "failure" ]] || [[ "${{ steps.wait-for-backend.outputs.conclusion }}" == "failure" ]]; then
            echo "CI checks failed!"
            exit 1
          fi

          echo "CI checks passed or were skipped (no changes)"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Configure Git
        run: |
          git config --global user.name 'semantic-release-bot'
          git config --global user.email 'semantic-release-bot@users.noreply.github.com'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/release-notes-generator semantic-release-github-pullrequest

      - name: Create release config for mode
        run: |
          if [[ "${{ steps.mode.outputs.mode }}" == "release" ]]; then
            echo "Creating standard release config..."
            cat > .releaserc.release.json << 'EOF'
          {
              "branches": ["main"],
              "plugins": [
                  "@semantic-release/commit-analyzer",
                  "@semantic-release/release-notes-generator",
                  [
                      "@semantic-release/changelog",
                      {
                          "changelogFile": "CHANGELOG.md"
                      }
                  ],
                  "@semantic-release/github"
              ]
          }
          EOF
          else
            echo "Using existing PR config (.releaserc.json)..."
          fi

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ steps.mode.outputs.mode }}" == "release" ]]; then
            echo "üöÄ Running semantic-release in RELEASE mode..."
            OUTPUT=$(semantic-release --extends .releaserc.release.json 2>&1)
          else
            echo "üìù Running semantic-release in PR mode..."
            OUTPUT=$(semantic-release 2>&1)
          fi

          echo "$OUTPUT" | tee semantic-release.log

          # Check results
          if echo "$OUTPUT" | grep -q "Created pull request" || echo "$OUTPUT" | grep -q "Pull request created"; then
            echo "new-release=pr-created" >> $GITHUB_OUTPUT
            echo "‚úÖ Pull request created successfully"
          elif echo "$OUTPUT" | grep -q "Published release" || echo "$OUTPUT" | grep -q "Created tag"; then
            echo "new-release=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Release published successfully"
          else
            echo "new-release=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No action needed"
          fi

  trigger-release:
    name: Trigger Release Build
    needs: semantic-release
    if: needs.semantic-release.outputs.new-release == 'true'
    uses: ./.github/workflows/release.yml
