name: Semantic Release

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write
  packages: write

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.repository_owner == github.actor || github.event_name == 'workflow_dispatch')) ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/'))
    outputs:
      new-release: ${{ steps.semantic.outputs.new-release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine mode
        id: mode
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" && "${{ github.event.pull_request.head.ref }}" == release/* ]]; then
            echo "mode=release" >> $GITHUB_OUTPUT
            echo "üöÄ Release mode: Publishing actual release"
          else
            echo "mode=pr" >> $GITHUB_OUTPUT
            echo "üìù PR mode: Creating release PR"
          fi

      - name: Wait for Frontend CI
        if: github.event_name == 'push'
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-frontend
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Frontend"
          ref: ${{ github.event.after || github.sha }}
          timeoutSeconds: 1800

      - name: Wait for Backend CI
        if: github.event_name == 'push'
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-backend
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Backend"
          ref: ${{ github.event.after || github.sha }}
          timeoutSeconds: 1800

      - name: Check CI Results
        if: github.event_name == 'push'
        run: |
          echo "Frontend check result: ${{ steps.wait-for-frontend.outputs.conclusion || 'skipped' }}"
          echo "Backend check result: ${{ steps.wait-for-backend.outputs.conclusion || 'skipped' }}"

          # Only fail if a check explicitly failed (not if it was skipped/didn't exist)
          if [[ "${{ steps.wait-for-frontend.outputs.conclusion }}" == "failure" ]] || [[ "${{ steps.wait-for-backend.outputs.conclusion }}" == "failure" ]]; then
            echo "CI checks failed!"
            exit 1
          fi

          echo "CI checks passed or were skipped (no changes)"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Configure Git
        run: |
          git config --global user.name 'semantic-release-bot'
          git config --global user.email 'semantic-release-bot@users.noreply.github.com'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/github

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ steps.mode.outputs.mode }}" == "release" ]]; then
            echo "üöÄ Running semantic-release in RELEASE mode..."
            OUTPUT=$(semantic-release 2>&1)
            echo "$OUTPUT" | tee semantic-release.log
            
            if echo "$OUTPUT" | grep -q "Published release" || echo "$OUTPUT" | grep -q "Created tag"; then
              echo "new-release=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Release published successfully"
            else
              echo "new-release=false" >> $GITHUB_OUTPUT
              echo "‚ÑπÔ∏è No release published"
            fi
          else
            echo "üìù Running semantic-release in DRY RUN mode to check for release..."
            OUTPUT=$(semantic-release --dry-run 2>&1)
            echo "$OUTPUT" | tee semantic-release.log
            
            # Check if there would be a release
            if echo "$OUTPUT" | grep -q "Published release" || echo "$OUTPUT" | grep -q "would publish"; then
              # Extract version from output
              VERSION=$(echo "$OUTPUT" | grep -oE "Published release [0-9]+\.[0-9]+\.[0-9]+" | head -1 | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")
              if [[ -z "$VERSION" ]]; then
                VERSION=$(echo "$OUTPUT" | grep -oE "The next release version is [0-9]+\.[0-9]+\.[0-9]+" | head -1 | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")
              fi
              
              if [[ -n "$VERSION" ]]; then
                echo "next-version=$VERSION" >> $GITHUB_OUTPUT
                echo "new-release=pending" >> $GITHUB_OUTPUT
                echo "üìã Next release would be: $VERSION"
                
                # Extract release notes from the output
                NOTES=$(echo "$OUTPUT" | sed -n '/Release note/,/^$/p' | head -10)
                if [[ -z "$NOTES" ]]; then
                  NOTES="Automated release based on conventional commits."
                fi
                echo "release-notes<<EOF" >> $GITHUB_OUTPUT
                echo "$NOTES" >> $GITHUB_OUTPUT
                echo "EOF" >> $GITHUB_OUTPUT
              else
                echo "new-release=false" >> $GITHUB_OUTPUT
                echo "‚ÑπÔ∏è No release needed"
              fi
            else
              echo "new-release=false" >> $GITHUB_OUTPUT
              echo "‚ÑπÔ∏è No release needed"
            fi
          fi

      - name: Create Release PR
        if: steps.semantic.outputs.new-release == 'pending'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(release): ${{ steps.semantic.outputs.next-version }}"
          title: "üöÄ Release ${{ steps.semantic.outputs.next-version }}"
          body: |
            ## Release ${{ steps.semantic.outputs.next-version }}

            This is an automated release PR created by semantic-release.

            ### Changes
            ${{ steps.semantic.outputs.release-notes }}

            **Merging this PR will trigger the actual release.**
          branch: release/${{ steps.semantic.outputs.next-version }}
          labels: |
            release
            automated
          reviewers: ${{ github.actor }}
          draft: false

  trigger-release:
    name: Trigger Release Build
    needs: semantic-release
    if: needs.semantic-release.outputs.new-release == 'true'
    uses: ./.github/workflows/release.yml
