name: Semantic Release with PR

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write
  packages: write

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.repository_owner == github.actor || github.event_name == 'workflow_dispatch'))
    outputs:
      new-release: ${{ steps.semantic.outputs.new-release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine mode
        id: mode
        run: |
          # Check if this push is from a merged release PR by looking for chore(release) pattern
          COMMIT_MESSAGE=$(git log -1 --pretty=%s)
          echo "Commit message: $COMMIT_MESSAGE"

          if [[ "$COMMIT_MESSAGE" =~ ^chore\(release\) ]]; then
            echo "mode=release" >> $GITHUB_OUTPUT
            echo "üöÄ Release mode: chore(release) pattern detected - triggering semantic-release"
          else
            echo "mode=pr" >> $GITHUB_OUTPUT
            echo "üìù PR mode: Creating release PR"
          fi

      - name: Wait for Frontend CI
        if: github.event_name == 'push'
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-frontend
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Frontend"
          ref: ${{ github.event.after || github.sha }}
          timeoutSeconds: 1800

      - name: Wait for Backend CI
        if: github.event_name == 'push'
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-backend
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Backend"
          ref: ${{ github.event.after || github.sha }}
          timeoutSeconds: 1800

      - name: Check CI Results
        if: github.event_name == 'push'
        run: |
          echo "Frontend check result: ${{ steps.wait-for-frontend.outputs.conclusion || 'skipped' }}"
          echo "Backend check result: ${{ steps.wait-for-backend.outputs.conclusion || 'skipped' }}"

          if [[ "${{ steps.wait-for-frontend.outputs.conclusion }}" == "failure" ]] || [[ "${{ steps.wait-for-backend.outputs.conclusion }}" == "failure" ]]; then
            echo "CI checks failed!"
            exit 1
          fi

          echo "CI checks passed or were skipped (no changes)"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Configure Git
        run: |
          git config --global user.name 'semantic-release-bot'
          git config --global user.email 'semantic-release-bot@users.noreply.github.com'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/github

      - name: Prepare Release with Tags
        if: steps.mode.outputs.mode == 'pr'
        id: prepare-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üìù Checking if a release is needed..."
          OUTPUT=$(semantic-release --dry-run 2>&1)
          echo "$OUTPUT" | tee semantic-release.log

          if echo "$OUTPUT" | grep -q "The next release version is"; then
            VERSION=$(echo "$OUTPUT" | grep -oE "The next release version is [0-9]+\.[0-9]+\.[0-9]+" | head -1 | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")
            
            if [[ -n "$VERSION" ]]; then
              echo "next-version=$VERSION" >> $GITHUB_OUTPUT
              echo "üìã Next release will be: $VERSION"
              
              # Generate changelog using our prepare config (stay on main)
              echo "üìù Generating changelog..."
              semantic-release --config .releaserc.prepare.json --no-ci --dry-run || true
              
              # Update package.json files with new version
              if [ -f "frontend/package.json" ]; then
                echo "üì¶ Updating frontend package.json version to $VERSION"
                sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" frontend/package.json
              fi
              
              # Update Cargo.toml if it exists
              if [ -f "backend/Cargo.toml" ]; then
                echo "üì¶ Updating backend Cargo.toml version to $VERSION"
                sed -i "s/^version = \".*\"/version = \"$VERSION\"/" backend/Cargo.toml
              fi
              
              echo "has-release=true" >> $GITHUB_OUTPUT
            else
              echo "has-release=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has-release=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No release needed"
          fi

      - name: Create Release PR
        if: steps.mode.outputs.mode == 'pr' && steps.prepare-release.outputs.has-release == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: release/${{ steps.prepare-release.outputs.next-version }}
          commit-message: "chore(release): prepare ${{ steps.prepare-release.outputs.next-version }}"
          title: "üöÄ Release ${{ steps.prepare-release.outputs.next-version }}"
          body: |
            ## Release ${{ steps.prepare-release.outputs.next-version }}

            This release PR includes:
            - üì¶ Version bumps in package.json/Cargo.toml
            - üìù Updated CHANGELOG.md

            **Merging this PR will trigger the release process and create the git tag.**
          labels: |
            release
            automated
          reviewers: ${{ github.actor }}
          draft: false

      - name: Complete Release
        if: steps.mode.outputs.mode == 'release'
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Release PR was merged, running semantic-release..."

          # Run semantic-release to create tag and GitHub release
          OUTPUT=$(semantic-release 2>&1)
          echo "$OUTPUT" | tee semantic-release.log

          if echo "$OUTPUT" | grep -q "Published release" || echo "$OUTPUT" | grep -q "Created tag"; then
            echo "new-release=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Release published successfully"
          else
            echo "new-release=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No release published"
          fi

  trigger-release:
    name: Trigger Release Build
    needs: semantic-release
    if: needs.semantic-release.outputs.new-release == 'true'
    uses: ./.github/workflows/release.yml
