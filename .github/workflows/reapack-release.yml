name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number for the release (e.g., 1.2.0)"
        required: true
        type: string
      release_notes:
        description: "Release notes for the release"
        required: false
        type: string
      triggered_by:
        description: "Who/what triggered this release"
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        description: "Version number for the release (e.g., 1.2.0)"
        required: true
        type: string
      release_notes:
        description: "Release notes for the release"
        required: false
        type: string
      triggered_by:
        description: "Who/what triggered this release"
        required: false
        type: string

permissions:
  contents: write

jobs:
  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: bun install

      - name: Build frontend
        working-directory: ./frontend
        run: bun run build

      - name: Bundle Lua script
        working-directory: ./lua
        run: |
          ./bundle.sh

      - name: Prepare release package
        run: |
          mkdir -p package/reaper-setlist

          # Copy frontend build output
          cp -r frontend/build/* package/reaper-setlist/
          cp html/setlist.html package/

          # Copy Lua bundle
          cp lua/build/reaper-setlist.lua package/

          # Create the release archive
          cd package
          zip -r ../reaper-setlist-${{ inputs.version }}.zip .

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: reaper-setlist-package
          path: reaper-setlist-${{ inputs.version }}.zip

  update-reapack:
    name: Update ReaPack Repository
    runs-on: ubuntu-latest
    needs: build-and-package
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Create Git Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag v${{ inputs.version }} -m "Release ${{ inputs.version }}"
          git push origin v${{ inputs.version }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: reaper-setlist-package

      - name: Extract package and update ReaPack structure
        run: |
          # Create temporary directory and extract the package
          mkdir -p temp-extract
          unzip -q reaper-setlist-${{ inputs.version }}.zip -d temp-extract

          # Clear existing files in ReaPack repo
          rm -rf reapack/repo/reaper-setlist/files/*

          # Create the ReaPack files directory structure
          mkdir -p reapack/repo/reaper-setlist/files

          # Copy files from extracted package to ReaPack structure
          # Copy the Lua script
          if [ -f "temp-extract/reaper-setlist.lua" ]; then
            cp temp-extract/reaper-setlist.lua reapack/repo/reaper-setlist/files/
          fi

          # Copy the HTML file
          if [ -f "temp-extract/setlist.html" ]; then
            cp temp-extract/setlist.html reapack/repo/reaper-setlist/files/
          fi

          # Copy the frontend build files
          if [ -d "temp-extract/reaper-setlist" ]; then
            cp -r temp-extract/reaper-setlist reapack/repo/reaper-setlist/files/
          fi

          echo "Updated ReaPack repository with new files:"
          find reapack/repo/reaper-setlist/files -type f | head -20

      - name: Install ReaPack generator dependencies
        working-directory: ./reapack/generator
        run: bun install --frozen-lockfile

      - name: Update ReaPack index
        working-directory: ./reapack/generator
        run: |
          # Use the version from the release input
          VERSION="${{ inputs.version }}"

          # Create changelog from release notes or use default
          CHANGELOG="${{ inputs.release_notes }}"
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="Release version $VERSION"
          fi

          # Run the CI release script
          bun ci-release.ts release \
            --release-version "$VERSION" \
            --changelog "$CHANGELOG" \
            --author "${{ inputs.triggered_by || github.actor }}"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(release): Update ReaPack repository for release ${{ inputs.version }}"
          title: "chore(release): Release ${{ inputs.version }}"
          body: |
            Automated release PR for version ${{ inputs.version }}

            This PR updates the ReaPack repository with the latest release files.

            **Triggered by:** ${{ inputs.triggered_by || github.actor }}

            **Changes:**
            - Updated ReaPack repository files
            - Generated new index for version ${{ inputs.version }}

            **Release Notes:**
            ${{ inputs.release_notes || 'No release notes provided' }}
          branch: "release/${{ inputs.version }}"
          base: main
          delete-branch: true
          author: "GitHub Action <action@github.com>"
          committer: "GitHub Action <action@github.com>"
