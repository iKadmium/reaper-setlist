name: Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name for the release (e.g., v1.2.0)"
        required: true
        type: string
      version:
        description: "Version number for the release (e.g., 1.2.0)"
        required: true
        type: string
      release_notes:
        description: "Release notes for the release"
        required: false
        type: string
  workflow_call:
    inputs:
      tag_name:
        description: "Tag name for the release (e.g., v1.2.0)"
        required: true
        type: string
      version:
        description: "Version number for the release (e.g., 1.2.0)"
        required: true
        type: string
      release_notes:
        description: "Release notes for the release"
        required: false
        type: string

permissions:
  contents: write

jobs:
  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: bun install

      - name: Build frontend
        working-directory: ./frontend
        run: bun run build

      - name: Bundle Lua script
        working-directory: ./lua
        run: |
          ./bundle.sh

      - name: Prepare release package
        run: |
          mkdir -p package/reaper_www_root/reaper-setlist
          mkdir -p package/Scripts

          # Copy frontend build output
          cp -r frontend/build/* package/reaper_www_root/reaper-setlist
          cp html/setlist.html package/reaper_www_root/

          # Copy Lua bundle
          cp lua/build/reaper-setlist.lua package/Scripts/

          # Copy Installation.txt
          cp Installation.txt package/

          # Create the release archive
          cd package
          zip -r ../reaper-setlist-${{ inputs.version }}.zip .

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: reaper-setlist-package
          path: reaper-setlist-${{ inputs.version }}.zip

  update-reapack:
    name: Update ReaPack Repository
    runs-on: ubuntu-latest
    needs: build-and-package
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: reaper-setlist-package

      - name: Extract package and update ReaPack structure
        run: |
          # Create temporary directory and extract the package
          mkdir -p temp-extract
          unzip -q reaper-setlist-${{ inputs.version }}.zip -d temp-extract

          # Clear existing files in ReaPack repo
          rm -rf reapack/repo/reaper-setlist/files/*

          # Create the ReaPack files directory structure
          mkdir -p reapack/repo/reaper-setlist/files

          # Copy files from extracted package to ReaPack structure
          # Copy the Lua script
          if [ -f "temp-extract/Scripts/reaper-setlist.lua" ]; then
            cp temp-extract/Scripts/reaper-setlist.lua reapack/repo/reaper-setlist/files/
          fi

          # Copy the HTML file
          if [ -f "temp-extract/reaper_www_root/setlist.html" ]; then
            cp temp-extract/reaper_www_root/setlist.html reapack/repo/reaper-setlist/files/
          fi

          # Copy the frontend build files
          if [ -d "temp-extract/reaper_www_root/reaper-setlist" ]; then
            cp -r temp-extract/reaper_www_root/reaper-setlist reapack/repo/reaper-setlist/files/
          fi

          echo "Updated ReaPack repository with new files:"
          find reapack/repo/reaper-setlist/files -type f | head -20

      - name: Install ReaPack generator dependencies
        working-directory: ./reapack/generator
        run: bun install --frozen-lockfile

      - name: Update ReaPack index
        working-directory: ./reapack/generator
        run: |
          # Use the version from the release input
          VERSION="${{ inputs.version }}"

          # Create changelog from release notes or use default
          CHANGELOG="${{ inputs.release_notes }}"
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="Release version $VERSION"
          fi

          # Run the CI release script
          bun ci-release.ts release \
            --release-version "$VERSION" \
            --changelog "$CHANGELOG" \
            --author "Release Workflow" \
            --time "$(date -u +%Y-%m-%dT%H:%M:%SZ)"

      - name: Commit and push ReaPack changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are changes to commit
          if git diff --quiet reapack/repo/; then
            echo "No changes to ReaPack repository"
          else
            git add reapack/repo/
            git commit -m "Update ReaPack repository for release ${{ inputs.version }} [skip ci]"
            git push
            echo "ReaPack repository updated and pushed"
          fi
