name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  # Build frontend assets once
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: bun install

      - name: Build frontend
        working-directory: ./frontend
        run: bun run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

  # Build backend for multiple platforms
  build-backend:
    name: Build Backend (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: build-frontend
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            artifact_name: reaper_setlist_backend
            asset_name: reaper-setlist-backend-linux-x64
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            artifact_name: reaper_setlist_backend
            asset_name: reaper-setlist-backend-linux-arm64
          - target: armv7-unknown-linux-musleabihf
            os: ubuntu-latest
            artifact_name: reaper_setlist_backend
            asset_name: reaper-setlist-backend-linux-armv7
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: reaper_setlist_backend
            asset_name: reaper-setlist-backend-macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: reaper_setlist_backend
            asset_name: reaper-setlist-backend-macos-arm64
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: reaper_setlist_backend.exe
            asset_name: reaper-setlist-backend-windows-x64.exe
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            artifact_name: reaper_setlist_backend.exe
            asset_name: reaper-setlist-backend-windows-arm64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          elif [[ "${{ matrix.target }}" == "armv7-unknown-linux-musleabihf" ]]; then
            sudo apt-get install -y gcc-arm-linux-gnueabihf
          fi

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: backend/assets/

      - name: Build backend
        working-directory: ./backend
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Create release archive
        shell: bash
        run: |
          mkdir -p release-staging

          # Copy the binary
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp backend/target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release-staging/
          else
            cp backend/target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release-staging/
          fi

          # Copy assets
          cp -r backend/assets release-staging/ 2>/dev/null || echo "No assets found"

          # Create archive
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cd release-staging
            7z a ../${{ matrix.asset_name }}.zip *
          else
            tar -czf ${{ matrix.asset_name }}.tar.gz -C release-staging .
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}
          path: |
            ${{ matrix.asset_name }}.tar.gz
            ${{ matrix.asset_name }}.zip

  # Build and push Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-assets/

      - name: Download Linux AMD64 binary
        uses: actions/download-artifact@v4
        with:
          name: build-x86_64-unknown-linux-musl
          path: linux-amd64/

      - name: Download Linux ARM64 binary
        uses: actions/download-artifact@v4
        with:
          name: build-aarch64-unknown-linux-musl
          path: linux-arm64/

      - name: Extract binaries from archives
        run: |
          # Extract AMD64 binary
          cd linux-amd64
          tar -xzf reaper-setlist-backend-linux-x64.tar.gz
          mkdir -p ../binaries/amd64
          cp reaper_setlist_backend ../binaries/amd64/

          # Extract ARM64 binary
          cd ../linux-arm64
          tar -xzf reaper-setlist-backend-linux-arm64.tar.gz
          mkdir -p ../binaries/arm64
          cp reaper_setlist_backend ../binaries/arm64/

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set lowercase repository name
        id: repo
        run: echo "REPO=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.release
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ steps.repo.outputs.REPO }}:latest
            ghcr.io/${{ steps.repo.outputs.REPO }}:${{ steps.version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-contexts: |
            amd64-binary=binaries/amd64
            arm64-binary=binaries/arm64
            frontend-assets=frontend-assets

  # Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-docker]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
          find artifacts -name "*.zip" -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set lowercase repository name
        id: repo
        run: echo "REPO=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, 'alpha') || contains(steps.version.outputs.VERSION, 'beta') || contains(steps.version.outputs.VERSION, 'rc') }}
          files: release-assets/*
          generate_release_notes: true
          body: |
            ## Changes in ${{ steps.version.outputs.VERSION }}

            ### Downloads

            **Linux:**
            - `reaper-setlist-backend-linux-x64.tar.gz` - Linux x86_64
            - `reaper-setlist-backend-linux-arm64.tar.gz` - Linux ARM64
            - `reaper-setlist-backend-linux-armv7.tar.gz` - Linux ARMv7

            **macOS:**
            - `reaper-setlist-backend-macos-x64.tar.gz` - macOS Intel
            - `reaper-setlist-backend-macos-arm64.tar.gz` - macOS Apple Silicon

            **Windows:**
            - `reaper-setlist-backend-windows-x64.exe.zip` - Windows x86_64
            - `reaper-setlist-backend-windows-arm64.exe.zip` - Windows ARM64

            **Docker Images:**
            - `ghcr.io/${{ steps.repo.outputs.REPO }}:${{ steps.version.outputs.VERSION }}` - Multi-arch (AMD64/ARM64)
            - `ghcr.io/${{ steps.repo.outputs.REPO }}:latest` - Multi-arch (AMD64/ARM64)

            Each archive contains the backend binary and frontend assets.

            ### Docker Usage
            ```bash
            docker run -p 3000:3000 ghcr.io/${{ steps.repo.outputs.REPO }}:${{ steps.version.outputs.VERSION }}
            ```
